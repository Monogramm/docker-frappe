os: linux
dist: trusty

services: docker

language: shell

branches:
  only:
    - master
    #- develop

before_install:
  - env | sort
  - export TAG=travis
  - export VCS_REF=`git rev-parse --short HEAD`
  - export BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
  - export home=$(pwd)
  - export travis_dir="${home}/images/${VERSION}-${BENCH}/${VARIANT}"
  - export IMAGE_NAME="docker-frappe-travis:${TAG}"

install:
  - echo "Changing to travis test directory ($travis_dir)"
  - cd "$travis_dir"
  # Prepare test image for local build version and variant
  - sed -i -e "s|FROM monogramm/docker-frappe:.*|FROM ${IMAGE_NAME}|g" test/Dockerfile
  # Test container build
  - travis_retry docker-compose -f "docker-compose.${DATABASE}.yml" build

before_script:
  - docker images
  # Set permissions for persistence
  - mkdir -p '/srv/erpnext/frappe/sites' '/srv/erpnext/frappe/logs'
  - chown 1000:1000 '/srv/erpnext/frappe/sites' '/srv/erpnext/frappe/logs'

script:
  - echo "Changing to travis test directory ($travis_dir)"
  - cd "$travis_dir"
  # Test container run
  - travis_retry docker-compose -f "docker-compose.${DATABASE}.yml" up -d
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs -f "sut"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_db"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_db" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_app"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_app" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_web"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_web" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "sut" | grep "Exit 0"
  # Test container db reinstall
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" bench reinstall --help
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" bench reinstall --yes && sleep 20
  # Test container restart
  - docker-compose -f "docker-compose.${DATABASE}.yml" down
  - travis_retry docker-compose -f "docker-compose.${DATABASE}.yml" up -d
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs -f "sut"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_db"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_db" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_app"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_app" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" logs "frappe_web"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "frappe_web" | grep "Up"
  - docker-compose -f "docker-compose.${DATABASE}.yml" ps "sut" | grep "Exit 0"
  # Test container migrate
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" bench migrate --help
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" migrate
  # Test container backup
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" bench backup --help
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" backup && sleep 5
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" backup && sleep 5
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" backup && sleep 5
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" backup && sleep 5
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" backup && sleep 5
  # Test container restore
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" bench restore --help
  # Test container "old" restore (file number instead of file name)
  - docker-compose -f "docker-compose.${DATABASE}.yml" run --rm "frappe_app" restore 1

after_script:
  - echo "Changing to project directory ($home)"
  - cd "$home"
  - sudo pip install coverage==4.5.4
  - sudo pip install python-coveralls
  # Create same directory path as docker test execution
  - sudo mkdir -p '/home/frappe/frappe-bench/apps'
  - sudo ln -sf "$home" '/home/frappe/frappe-bench/apps/erpnext_template'
  # Copy and convert coverage to XML format
  - cp '/srv/erpnext/frappe/sites/.coverage' .coverage
  - coverage xml
  # Publish coverage to Coveralls
  - coveralls -b "$home" -d "$home/.coverage"
  # Publish coverage to Codacy
  - test -z "$CODACY_PROJECT_TOKEN" || bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l Python -r "./coverage.xml"
  # Publish coverage to Codecov
  - test -z "$CODECOV_TOKEN" || bash <(curl -s https://codecov.io/bash)

notifications:
  email: false

jobs:
  allow_failures:
    - env: VERSION=develop BENCH=master VARIANT=alpine DATABASE=postgres
    - env: VERSION=develop BENCH=master VARIANT=alpine DATABASE=mariadb
    - env: VERSION=develop BENCH=master VARIANT=slim-buster DATABASE=postgres
    - env: VERSION=develop BENCH=master VARIANT=slim-buster DATABASE=mariadb
    - env: VERSION=develop BENCH=master VARIANT=buster DATABASE=postgres
    - env: VERSION=develop BENCH=master VARIANT=buster DATABASE=mariadb
    - env: VERSION=12 BENCH=master VARIANT=alpine DATABASE=postgres
    - env: VERSION=12 BENCH=master VARIANT=slim-buster DATABASE=postgres
    - env: VERSION=12 BENCH=master VARIANT=buster DATABASE=postgres
    - env: VERSION=13 BENCH=master VARIANT=alpine DATABASE=postgres
    - env: VERSION=13 BENCH=master VARIANT=alpine DATABASE=mariadb
    - env: VERSION=13 BENCH=master VARIANT=slim-buster DATABASE=postgres
    - env: VERSION=13 BENCH=master VARIANT=slim-buster DATABASE=mariadb
    - env: VERSION=13 BENCH=master VARIANT=buster DATABASE=postgres
    - env: VERSION=13 BENCH=master VARIANT=buster DATABASE=mariadb
    # Stop supporting Frappe 10 and Python 2
    - env: VERSION=10.x BENCH=master VARIANT=alpine DATABASE=mariadb
    - env: VERSION=10.x BENCH=master VARIANT=slim-buster DATABASE=mariadb
    - env: VERSION=10.x BENCH=master VARIANT=buster DATABASE=mariadb

env: # Environments
  - VERSION=11 BENCH=master VARIANT=alpine DATABASE=mariadb
  - VERSION=11 BENCH=master VARIANT=slim-buster DATABASE=mariadb
  - VERSION=11 BENCH=master VARIANT=buster DATABASE=mariadb
  - VERSION=12 BENCH=master VARIANT=alpine DATABASE=postgres
  - VERSION=12 BENCH=master VARIANT=alpine DATABASE=mariadb
  - VERSION=12 BENCH=master VARIANT=slim-buster DATABASE=postgres
  - VERSION=12 BENCH=master VARIANT=slim-buster DATABASE=mariadb
  - VERSION=12 BENCH=master VARIANT=buster DATABASE=postgres
  - VERSION=12 BENCH=master VARIANT=buster DATABASE=mariadb
  - VERSION=13 BENCH=master VARIANT=alpine DATABASE=postgres
  - VERSION=13 BENCH=master VARIANT=alpine DATABASE=mariadb
  - VERSION=13 BENCH=master VARIANT=slim-buster DATABASE=postgres
  - VERSION=13 BENCH=master VARIANT=slim-buster DATABASE=mariadb
  - VERSION=13 BENCH=master VARIANT=buster DATABASE=postgres
  - VERSION=13 BENCH=master VARIANT=buster DATABASE=mariadb
  - VERSION=develop BENCH=master VARIANT=alpine DATABASE=postgres
  - VERSION=develop BENCH=master VARIANT=alpine DATABASE=mariadb
  - VERSION=develop BENCH=master VARIANT=slim-buster DATABASE=postgres
  - VERSION=develop BENCH=master VARIANT=slim-buster DATABASE=mariadb
  - VERSION=develop BENCH=master VARIANT=buster DATABASE=postgres
  - VERSION=develop BENCH=master VARIANT=buster DATABASE=mariadb
